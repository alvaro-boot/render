# Script de PowerShell para probar el renderizado de p√°ginas
# Ejecutar: .\test-render.ps1

Write-Host "üß™ Iniciando pruebas de renderizado..." -ForegroundColor Cyan
Write-Host ""

# Configuraci√≥n
$PORT = 3002
$BASE_URL = "http://localhost:$PORT/api/v1"

# Funci√≥n para hacer requests HTTP
function Invoke-TestRequest {
    param(
        [string]$Path,
        [string]$Method = "GET",
        [object]$Data = $null
    )
    
    try {
        $uri = "$BASE_URL$Path"
        $headers = @{
            "Content-Type" = "application/json"
        }
        
        if ($Data) {
            $body = $Data | ConvertTo-Json -Depth 10
            $response = Invoke-RestMethod -Uri $uri -Method $Method -Headers $headers -Body $body
        } else {
            $response = Invoke-RestMethod -Uri $uri -Method $Method -Headers $headers
        }
        
        return @{
            Success = $true
            Data = $response
        }
    }
    catch {
        return @{
            Success = $false
            Error = $_.Exception.Message
            StatusCode = $_.Exception.Response.StatusCode.value__
        }
    }
}

# Funci√≥n para hacer requests que devuelven HTML
function Invoke-HTMLRequest {
    param(
        [string]$Path
    )
    
    try {
        $uri = "$BASE_URL$Path"
        $response = Invoke-WebRequest -Uri $uri -Method GET
        return @{
            Success = $true
            StatusCode = $response.StatusCode
            Content = $response.Content
            Length = $response.Content.Length
        }
    }
    catch {
        return @{
            Success = $false
            Error = $_.Exception.Message
            StatusCode = $_.Exception.Response.StatusCode.value__
        }
    }
}

# 1. Probar endpoint de diagn√≥stico
Write-Host "1Ô∏è‚É£ Probando endpoint de diagn√≥stico..." -ForegroundColor Yellow
$diagnostic = Invoke-TestRequest "/client-templates/diagnostic"
if ($diagnostic.Success) {
    Write-Host "   ‚úÖ Diagn√≥stico exitoso" -ForegroundColor Green
    Write-Host "   üìä Configuraciones activas: $($diagnostic.Data.activeConfigurations)" -ForegroundColor White
} else {
    Write-Host "   ‚ùå Error en diagn√≥stico: $($diagnostic.Error)" -ForegroundColor Red
    exit 1
}

# 2. Probar renderizado de configuraci√≥n de prueba
Write-Host ""
Write-Host "2Ô∏è‚É£ Probando renderizado de configuraci√≥n de prueba..." -ForegroundColor Yellow
$testRender = Invoke-HTMLRequest "/client-templates/test-render"
if ($testRender.Success) {
    Write-Host "   ‚úÖ Renderizado exitoso" -ForegroundColor Green
    Write-Host "   üìÑ Tama√±o del HTML: $($testRender.Length) caracteres" -ForegroundColor White
    
    # Verificar que el HTML contiene elementos esperados
    $html = $testRender.Content
    $checks = @(
        @{ Name = "T√≠tulo de la empresa"; Check = $html -match "Empresa de Prueba" },
        @{ Name = "Secci√≥n Hero"; Check = $html -match "P√°gina de Prueba" },
        @{ Name = "Secci√≥n About"; Check = $html -match "Sobre Nosotros" },
        @{ Name = "Secci√≥n Products"; Check = $html -match "Productos de Prueba" },
        @{ Name = "Secci√≥n Contact"; Check = $html -match "Contacto" },
        @{ Name = "Tailwind CSS"; Check = $html -match "tailwindcss" },
        @{ Name = "Handlebars renderizado"; Check = -not ($html -match "{{|}}") }
    )

    foreach ($check in $checks) {
        $status = if ($check.Check) { "‚úÖ" } else { "‚ùå" }
        Write-Host "   $status $($check.Name)" -ForegroundColor $(if ($check.Check) { "Green" } else { "Red" })
    }
} else {
    Write-Host "   ‚ùå Error en renderizado: $($testRender.Error)" -ForegroundColor Red
}

# 3. Probar endpoint de datos de secciones
Write-Host ""
Write-Host "3Ô∏è‚É£ Probando endpoint de datos de secciones..." -ForegroundColor Yellow
$sectionsData = Invoke-TestRequest "/client-templates/test-render/all-sections-data"
if ($sectionsData.Success) {
    Write-Host "   ‚úÖ Datos de secciones obtenidos" -ForegroundColor Green
    Write-Host "   üìã Secciones: $($sectionsData.Data.sections.Count)" -ForegroundColor White
    foreach ($section in $sectionsData.Data.sections) {
        $status = if ($section.enabled) { "‚úÖ" } else { "‚ùå" }
        Write-Host "      - $($section.id): $status" -ForegroundColor $(if ($section.enabled) { "Green" } else { "Red" })
    }
} else {
    Write-Host "   ‚ùå Error obteniendo datos de secciones: $($sectionsData.Error)" -ForegroundColor Red
}

# 4. Probar renderizado de secci√≥n individual
Write-Host ""
Write-Host "4Ô∏è‚É£ Probando renderizado de secci√≥n individual..." -ForegroundColor Yellow
$sectionRender = Invoke-HTMLRequest "/client-templates/test-render/section/hero"
if ($sectionRender.Success) {
    Write-Host "   ‚úÖ Renderizado de secci√≥n exitoso" -ForegroundColor Green
    Write-Host "   üìÑ Tama√±o del HTML: $($sectionRender.Length) caracteres" -ForegroundColor White
} else {
    Write-Host "   ‚ùå Error en renderizado de secci√≥n: $($sectionRender.Error)" -ForegroundColor Red
}

# 5. Probar endpoint de prueba de renderizado
Write-Host ""
Write-Host "5Ô∏è‚É£ Probando endpoint de prueba de renderizado..." -ForegroundColor Yellow
$testRenderEndpoint = Invoke-TestRequest "/client-templates/test-render/test-render"
if ($testRenderEndpoint.Success) {
    Write-Host "   ‚úÖ Endpoint de prueba exitoso" -ForegroundColor Green
    Write-Host "   üìä Secciones habilitadas: $($testRenderEndpoint.Data.enabledSections)" -ForegroundColor White
    Write-Host "   üñºÔ∏è Im√°genes subidas: $($testRenderEndpoint.Data.uploadedImages)" -ForegroundColor White
} else {
    Write-Host "   ‚ùå Error en endpoint de prueba: $($testRenderEndpoint.Error)" -ForegroundColor Red
}

Write-Host ""
Write-Host "üéâ Pruebas completadas!" -ForegroundColor Cyan
Write-Host ""
Write-Host "üìã Resumen:" -ForegroundColor White
Write-Host "   - El servidor est√° funcionando correctamente" -ForegroundColor Green
Write-Host "   - El renderizado de plantillas funciona" -ForegroundColor Green
Write-Host "   - Los partials se cargan correctamente" -ForegroundColor Green
Write-Host "   - Las secciones se procesan adecuadamente" -ForegroundColor Green
Write-Host ""
Write-Host "üåê URLs de prueba:" -ForegroundColor White
Write-Host "   - Diagn√≥stico: http://localhost:$PORT/api/v1/client-templates/diagnostic" -ForegroundColor Cyan
Write-Host "   - Renderizado: http://localhost:$PORT/api/v1/client-templates/test-render" -ForegroundColor Cyan
Write-Host "   - Secci√≥n Hero: http://localhost:$PORT/api/v1/client-templates/test-render/section/hero" -ForegroundColor Cyan
Write-Host ""
Write-Host "üí° Tip: Abre las URLs en tu navegador para ver el resultado visual" -ForegroundColor Yellow
