CAMBIOS REQUERIDOS EN EL FRONTEND
====================================

Después de corregir el DTO en el backend, el frontend necesita estos ajustes:

1. ESTRUCTURA DE TIPOS/TYPESCRIPT
================================

interface CreateClientRequest {
  clientId: string;
  name: string;
  description?: string;
  style: 'clasico' | 'moderno' | 'minimalista';
  sections: SectionConfiguration[];
  company: CompanyInfo;
  theme: ThemeConfiguration;
}

interface SectionConfiguration {
  id: string;
  enabled: boolean;
  order: number;
  data?: any;
}

interface CompanyInfo {
  name: string;
  tagline: string;
  description: string;
  logo?: string;
  favicon?: string;
}

interface ThemeConfiguration {
  colors: {
    primary: string;
    primaryForeground: string;
    secondary: string;
    secondaryForeground: string;
    background: string;
    foreground: string;
    accent: string;
    accentForeground: string;
  };
  fonts: {
    heading: string;
    body: string;
  };
}

2. FUNCIÓN PARA CREAR CLIENTE
============================

async function createClientTemplate(clientData: CreateClientRequest) {
  try {
    const response = await fetch('http://localhost:3001/api/v1/client-templates', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(clientData)
    });

    if (!response.ok) {
      const error = await response.json();
      throw new Error(error.message || 'Error al crear cliente');
    }

    return await response.json();
  } catch (error) {
    console.error('Error:', error);
    throw error;
  }
}

3. EJEMPLO DE DATOS DE PRUEBA
=============================

const sampleClientData: CreateClientRequest = {
  clientId: "mi-cliente-001",
  name: "Mi Empresa",
  description: "Descripción de mi empresa",
  style: "moderno",
  sections: [
    {
      id: "hero",
      enabled: true,
      order: 1,
      data: {
        title: "Mi Empresa",
        subtitle: "Descripción de mi empresa",
        backgroundImage: "/images/hero-bg.jpg",
        ctaButtons: [
          {
            text: "Ver Productos",
            href: "#products",
            style: "primary"
          }
        ]
      }
    },
    {
      id: "products",
      enabled: true,
      order: 2,
      data: {
        title: "Nuestros Productos",
        subtitle: "Descubre nuestra colección",
        featuredProducts: [
          {
            name: "Producto 1",
            description: "Descripción del producto",
            price: 99.99,
            image: "/images/product1.jpg",
            category: "Categoría 1"
          }
        ]
      }
    },
    {
      id: "about",
      enabled: false,
      order: 3,
      data: {}
    },
    {
      id: "services",
      enabled: false,
      order: 4,
      data: {}
    },
    {
      id: "testimonials",
      enabled: false,
      order: 5,
      data: {}
    },
    {
      id: "gallery",
      enabled: false,
      order: 6,
      data: {}
    },
    {
      id: "contact",
      enabled: false,
      order: 7,
      data: {}
    },
    {
      id: "cart",
      enabled: false,
      order: 8,
      data: {}
    },
    {
      id: "appointments",
      enabled: false,
      order: 9,
      data: {}
    },
    {
      id: "stats",
      enabled: false,
      order: 10,
      data: {}
    }
  ],
  company: {
    name: "Mi Empresa",
    tagline: "Mi eslogan",
    description: "Descripción de mi empresa",
    logo: "/images/logo.png",
    favicon: "/favicon.ico"
  },
  theme: {
    colors: {
      primary: "25 95% 53%",
      primaryForeground: "0 0% 100%",
      secondary: "0 0% 96%",
      secondaryForeground: "0 0% 9%",
      background: "0 0% 100%",
      foreground: "0 0% 9%",
      accent: "25 95% 53%",
      accentForeground: "0 0% 100%"
    },
    fonts: {
      heading: "Playfair Display, serif",
      body: "Inter, sans-serif"
    }
  }
};

4. FUNCIÓN PARA OBTENER SECCIONES DISPONIBLES
============================================

async function getAvailableSections() {
  try {
    const response = await fetch('http://localhost:3001/api/v1/client-templates/available-sections');
    const data = await response.json();
    return data.sections;
  } catch (error) {
    console.error('Error al obtener secciones:', error);
    throw error;
  }
}

5. FUNCIÓN PARA RENDERIZAR PÁGINA
=================================

async function renderClientPage(clientId: string) {
  try {
    const response = await fetch(`http://localhost:3001/api/v1/client-templates/${clientId}`);
    if (!response.ok) {
      throw new Error('Cliente no encontrado');
    }
    return await response.text(); // Retorna HTML
  } catch (error) {
    console.error('Error al renderizar página:', error);
    throw error;
  }
}

6. EJEMPLO DE FORMULARIO REACT
==============================

import React, { useState } from 'react';

function CreateClientForm() {
  const [formData, setFormData] = useState({
    clientId: '',
    name: '',
    description: '',
    style: 'clasico' as const,
    sections: [],
    company: {
      name: '',
      tagline: '',
      description: ''
    },
    theme: {
      colors: {
        primary: '25 95% 53%',
        primaryForeground: '0 0% 100%',
        secondary: '0 0% 96%',
        secondaryForeground: '0 0% 9%',
        background: '0 0% 100%',
        foreground: '0 0% 9%',
        accent: '25 95% 53%',
        accentForeground: '0 0% 100%'
      },
      fonts: {
        heading: 'Arial, sans-serif',
        body: 'Arial, sans-serif'
      }
    }
  });

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      const result = await createClientTemplate(formData);
      console.log('Cliente creado:', result);
    } catch (error) {
      console.error('Error:', error);
    }
  };

  return (
    <form onSubmit={handleSubmit}>
      {/* Campos del formulario */}
    </form>
  );
}

7. VALIDACIONES IMPORTANTES
===========================

- Sección Hero obligatoria: Siempre debe estar habilitada (enabled: true)
- Estilos válidos: Solo 'clasico', 'moderno', 'minimalista'
- Campos requeridos: clientId, name, style, sections, company, theme
- Estructura de fonts: Debe tener heading y body como strings
- Todas las secciones deben estar en el array, incluso las deshabilitadas
- Los colores deben ser strings en formato HSL
- El orden de las secciones importa para el renderizado

8. ENDPOINTS DISPONIBLES
========================

GET    /api/v1/client-templates/available-sections
POST   /api/v1/client-templates
GET    /api/v1/client-templates/:clientId
POST   /api/v1/client-templates/:clientId/render
GET    /api/v1/client-templates/:clientId/configuration
PUT    /api/v1/client-templates/:clientId/configuration
DELETE /api/v1/client-templates/:clientId
GET    /api/v1/client-templates/:clientId/preview

9. ESTRUCTURA DE SECCIONES DISPONIBLES
======================================

- hero (obligatoria)
- about
- products
- services
- testimonials
- gallery
- contact
- cart
- appointments
- stats

10. PUNTOS CLAVE A RECORDAR
===========================

- El campo fonts ahora es un objeto con heading y body
- Los colores deben ser strings en formato HSL
- La sección Hero siempre debe estar habilitada
- El orden de las secciones importa para el renderizado
- Todas las secciones deben estar en el array, incluso las deshabilitadas
- Los datos de cada sección van en el campo data
- El campo enabled controla si la sección aparece en la página

11. EJEMPLO DE USO COMPLETO
===========================

// 1. Obtener secciones disponibles
const sections = await getAvailableSections();

// 2. Crear configuración de cliente
const clientConfig = {
  clientId: "mi-cliente",
  name: "Mi Empresa",
  style: "moderno",
  sections: [
    {
      id: "hero",
      enabled: true,
      order: 1,
      data: { title: "Mi Empresa", subtitle: "Descripción" }
    },
    // ... resto de secciones
  ],
  company: {
    name: "Mi Empresa",
    tagline: "Mi eslogan",
    description: "Descripción"
  },
  theme: {
    colors: { /* colores */ },
    fonts: {
      heading: "Arial, sans-serif",
      body: "Arial, sans-serif"
    }
  }
};

// 3. Crear cliente
const result = await createClientTemplate(clientConfig);

// 4. Renderizar página
const html = await renderClientPage("mi-cliente");
