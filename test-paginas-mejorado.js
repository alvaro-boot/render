const axios = require('axios');
const chalk = require('chalk');

const BASE_URL = 'http://localhost:3000/api/v1/client-templates';

// Colores para la consola
const colors = {
    success: chalk.green,
    error: chalk.red,
    info: chalk.blue,
    warning: chalk.yellow,
    title: chalk.cyan.bold,
    subtitle: chalk.magenta,
    highlight: chalk.yellow.bold
};

async function testPaginasIndividuales() {
    console.log(colors.title('\nüöÄ SISTEMA DE P√ÅGINAS INDIVIDUALES - PRUEBAS MEJORADAS'));
    console.log(colors.subtitle('='.repeat(60) + '\n'));
    
    try {
        // 1. Listar clientes disponibles
        console.log(colors.info('1Ô∏è‚É£ Listando clientes disponibles...'));
        const clientsResponse = await axios.get(BASE_URL);
        const clients = clientsResponse.data;
        
        if (clients.length === 0) {
            console.log(colors.error('‚ùå No hay clientes configurados'));
            return;
        }
        
        const clientId = clients[0].clientId;
        console.log(colors.success(`‚úÖ Cliente seleccionado: ${colors.highlight(clientId)}\n`));
        
        // 2. Obtener informaci√≥n de p√°ginas
        console.log(colors.info('2Ô∏è‚É£ Obteniendo informaci√≥n de p√°ginas...'));
        const pagesInfoResponse = await axios.get(`${BASE_URL}/${clientId}/pages-info`);
        const pagesInfo = pagesInfoResponse.data;
        
        console.log(colors.success(`üìä Cliente: ${colors.highlight(pagesInfo.clientName)}`));
        console.log(colors.success(`üé® Estilo: ${colors.highlight(pagesInfo.style)}`));
        console.log(colors.success(`üìÑ Total de p√°ginas: ${colors.highlight(pagesInfo.totalPages)}\n`));
        
        // 3. Probar √≠ndice de p√°ginas
        console.log(colors.info('3Ô∏è‚É£ Probando √≠ndice de p√°ginas...'));
        const indexResponse = await axios.get(`${BASE_URL}/${clientId}/pages`);
        console.log(colors.success(`‚úÖ √çndice accesible (${colors.highlight(indexResponse.data.length)} caracteres)\n`));
        
        // 4. Probar p√°ginas individuales
        console.log(colors.info('4Ô∏è‚É£ Probando p√°ginas individuales...'));
        const pageResults = [];
        
        for (const page of pagesInfo.pages.slice(0, 3)) {
            try {
                const pageResponse = await axios.get(page.url);
                const status = colors.success('‚úÖ');
                const size = colors.highlight(pageResponse.data.length);
                pageResults.push({ page, status, size, success: true });
            } catch (error) {
                const status = colors.error('‚ùå');
                const errorMsg = colors.error(error.message);
                pageResults.push({ page, status, error: errorMsg, success: false });
            }
        }
        
        // Mostrar resultados de p√°ginas
        pageResults.forEach(result => {
            if (result.success) {
                console.log(`${result.status} ${result.page.name} (${result.page.id}): ${result.size} caracteres`);
            } else {
                console.log(`${result.status} ${result.page.name} (${result.page.id}): ${result.error}`);
            }
        });
        
        console.log('\n' + colors.title('üéâ PRUEBAS COMPLETADAS EXITOSAMENTE!'));
        console.log(colors.subtitle('='.repeat(60)));
        
        // 5. Mostrar URLs disponibles
        console.log(colors.info('\nüìã URLs DISPONIBLES:'));
        console.log(colors.highlight(`   √çndice: ${pagesInfo.indexUrl}`));
        console.log(colors.highlight(`   Sitio completo: ${pagesInfo.fullSiteUrl}`));
        console.log(colors.highlight(`   Configuraci√≥n: ${pagesInfo.configurationUrl}`));
        
        pagesInfo.pages.forEach(page => {
            console.log(colors.highlight(`   ${page.name}: ${page.url}`));
        });
        
        // 6. Mostrar estad√≠sticas
        console.log(colors.info('\nüìä ESTAD√çSTICAS:'));
        console.log(colors.highlight(`   ‚Ä¢ Total de secciones: ${pagesInfo.totalPages}`));
        console.log(colors.highlight(`   ‚Ä¢ Estilo actual: ${pagesInfo.style}`));
        console.log(colors.highlight(`   ‚Ä¢ Cliente: ${pagesInfo.clientName}`));
        
        // 7. Mostrar informaci√≥n de navegaci√≥n
        console.log(colors.info('\nüéÆ NAVEGACI√ìN POR TECLADO:'));
        console.log(colors.highlight('   ‚Üê Flecha izquierda: Secci√≥n anterior'));
        console.log(colors.highlight('   ‚Üí Flecha derecha: Siguiente secci√≥n'));
        console.log(colors.highlight('   Home: Volver al √≠ndice'));
        
        // 8. Mostrar caracter√≠sticas del dise√±o
        console.log(colors.info('\nüé® CARACTER√çSTICAS DEL DISE√ëO:'));
        console.log(colors.highlight('   ‚Ä¢ Navegaci√≥n flotante con efectos glassmorphism'));
        console.log(colors.highlight('   ‚Ä¢ Animaciones suaves y transiciones'));
        console.log(colors.highlight('   ‚Ä¢ Dise√±o responsivo para m√≥viles'));
        console.log(colors.highlight('   ‚Ä¢ Efectos de hover mejorados'));
        console.log(colors.highlight('   ‚Ä¢ Breadcrumbs con navegaci√≥n intuitiva'));
        console.log(colors.highlight('   ‚Ä¢ Footer con informaci√≥n detallada'));
        
        // 9. Mostrar comandos de prueba
        console.log(colors.info('\nüß™ COMANDOS DE PRUEBA:'));
        console.log(colors.highlight('   # Probar √≠ndice'));
        console.log(colors.subtitle(`   curl ${pagesInfo.indexUrl}`));
        console.log(colors.highlight('   # Probar p√°gina individual'));
        console.log(colors.subtitle(`   curl ${pagesInfo.pages[0]?.url || 'URL_EJEMPLO'}`));
        console.log(colors.highlight('   # Obtener informaci√≥n JSON'));
        console.log(colors.subtitle(`   curl ${pagesInfo.configurationUrl}`));
        
        console.log(colors.title('\n‚ú® ¬°Sistema de p√°ginas individuales funcionando perfectamente!'));
        
    } catch (error) {
        console.log(colors.error('\n‚ùå ERROR EN LAS PRUEBAS:'));
        console.log(colors.error(`   ${error.message}`));
        
        if (error.response) {
            console.log(colors.error(`   Status: ${error.response.status}`));
            console.log(colors.error(`   Data: ${JSON.stringify(error.response.data, null, 2)}`));
        }
    }
}

// Funci√≥n para mostrar ayuda
function showHelp() {
    console.log(colors.title('\nüìñ AYUDA - SISTEMA DE P√ÅGINAS INDIVIDUALES'));
    console.log(colors.subtitle('='.repeat(50)));
    console.log(colors.info('\nUso:'));
    console.log(colors.highlight('   node test-paginas-mejorado.js'));
    console.log(colors.highlight('   npm run test:pages'));
    
    console.log(colors.info('\nCaracter√≠sticas:'));
    console.log(colors.highlight('   ‚Ä¢ Pruebas autom√°ticas del sistema'));
    console.log(colors.highlight('   ‚Ä¢ Verificaci√≥n de endpoints'));
    console.log(colors.highlight('   ‚Ä¢ Validaci√≥n de respuestas'));
    console.log(colors.highlight('   ‚Ä¢ Reporte detallado de resultados'));
    
    console.log(colors.info('\nRequisitos:'));
    console.log(colors.highlight('   ‚Ä¢ Servidor ejecut√°ndose en localhost:3000'));
    console.log(colors.highlight('   ‚Ä¢ Al menos un cliente configurado'));
    console.log(colors.highlight('   ‚Ä¢ Dependencias: axios, chalk'));
    
    console.log(colors.info('\nInstalaci√≥n:'));
    console.log(colors.highlight('   npm install axios chalk'));
}

// Verificar argumentos de l√≠nea de comandos
const args = process.argv.slice(2);
if (args.includes('--help') || args.includes('-h')) {
    showHelp();
    process.exit(0);
}

// Ejecutar si es el archivo principal
if (require.main === module) {
    testPaginasIndividuales();
}

module.exports = { testPaginasIndividuales, showHelp };
