const axios = require('axios');
const chalk = require('chalk');

const BASE_URL = 'http://localhost:3000/api/v1/client-templates';

// Colores para la consola
const colors = {
    success: chalk.green,
    error: chalk.red,
    info: chalk.blue,
    warning: chalk.yellow,
    title: chalk.cyan.bold,
    subtitle: chalk.magenta,
    highlight: chalk.yellow.bold
};

async function testDisenosMejorados() {
    console.log(colors.title('\nüé® PRUEBA DE DISE√ëOS MEJORADOS - SISTEMA DE P√ÅGINAS INDIVIDUALES'));
    console.log(colors.subtitle('='.repeat(70) + '\n'));
    
    try {
        // 1. Listar clientes disponibles
        console.log(colors.info('1Ô∏è‚É£ Listando clientes disponibles...'));
        const clientsResponse = await axios.get(BASE_URL);
        const clients = clientsResponse.data;
        
        if (clients.length === 0) {
            console.log(colors.error('‚ùå No hay clientes configurados'));
            return;
        }
        
        console.log(colors.success(`‚úÖ Encontrados ${clients.length} clientes:`));
        clients.forEach((client, index) => {
            console.log(colors.highlight(`   ${index + 1}. ${client.clientId} - ${client.name}`));
        });
        
        // 2. Seleccionar cliente (usar el primero)
        const selectedClient = clients[0];
        console.log(colors.info(`\n2Ô∏è‚É£ Probando dise√±os para: ${colors.highlight(selectedClient.clientId)}`));
        
        // 3. Obtener informaci√≥n de p√°ginas
        console.log(colors.info('\n3Ô∏è‚É£ Obteniendo informaci√≥n de p√°ginas...'));
        const pagesInfoResponse = await axios.get(`${BASE_URL}/${selectedClient.clientId}/pages-info`);
        const pagesInfo = pagesInfoResponse.data;
        
        console.log(colors.success(`‚úÖ ${pagesInfo.totalPages} p√°ginas disponibles:`));
        
        // 4. Probar cada p√°gina individual
        console.log(colors.info('\n4Ô∏è‚É£ Probando p√°ginas individuales...'));
        
        for (const page of pagesInfo.pages) {
            try {
                console.log(colors.info(`   üîç Probando: ${page.name}`));
                
                const pageResponse = await axios.get(page.url);
                
                // Verificar elementos de dise√±o mejorado
                const html = pageResponse.data;
                const designChecks = [
                    { name: 'Layout moderno', check: html.includes('content-wrapper') },
                    { name: 'Navegaci√≥n flotante', check: html.includes('floating-nav') },
                    { name: 'Header mejorado', check: html.includes('main-header') },
                    { name: 'Footer moderno', check: html.includes('main-footer') },
                    { name: 'Gradientes CSS', check: html.includes('bg-gradient-to-r') },
                    { name: 'Sombras modernas', check: html.includes('shadow-2xl') },
                    { name: 'Bordes redondeados', check: html.includes('rounded-2xl') },
                    { name: 'Animaciones CSS', check: html.includes('transition-all') },
                    { name: 'Responsive design', check: html.includes('@media') },
                    { name: 'SEO optimizado', check: html.includes('meta property="og:') }
                ];
                
                let passedChecks = 0;
                designChecks.forEach(check => {
                    if (check.check) {
                        console.log(colors.success(`      ‚úÖ ${check.name}`));
                        passedChecks++;
                    } else {
                        console.log(colors.warning(`      ‚ö†Ô∏è  ${check.name}`));
                    }
                });
                
                const percentage = Math.round((passedChecks / designChecks.length) * 100);
                console.log(colors.highlight(`      üìä Dise√±o: ${percentage}% completado`));
                
                // Verificar tama√±o de respuesta
                const sizeKB = Math.round(pageResponse.data.length / 1024);
                console.log(colors.subtitle(`      üìè Tama√±o: ${sizeKB} KB`));
                
            } catch (error) {
                console.log(colors.error(`      ‚ùå Error en ${page.name}: ${error.message}`));
            }
        }
        
        // 5. Probar p√°gina de √≠ndice
        console.log(colors.info('\n5Ô∏è‚É£ Probando p√°gina de √≠ndice...'));
        try {
            const indexResponse = await axios.get(`${BASE_URL}/${selectedClient.clientId}/pages`);
            const indexHtml = indexResponse.data;
            
            const indexChecks = [
                { name: 'Grid de secciones', check: indexHtml.includes('grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3') },
                { name: 'Tarjetas modernas', check: indexHtml.includes('rounded-2xl shadow-lg') },
                { name: 'Efectos hover', check: indexHtml.includes('hover:-translate-y-2') },
                { name: 'Iconos de secciones', check: indexHtml.includes('text-6xl') },
                { name: 'Panel de informaci√≥n', check: indexHtml.includes('Informaci√≥n del Sitio') },
                { name: 'Botones de acci√≥n', check: indexHtml.includes('Acciones R√°pidas') },
                { name: 'Gradientes de colores', check: indexHtml.includes('from-purple-500 to-blue-500') },
                { name: 'Animaciones de entrada', check: indexHtml.includes('fade-in') }
            ];
            
            let passedIndexChecks = 0;
            indexChecks.forEach(check => {
                if (check.check) {
                    console.log(colors.success(`   ‚úÖ ${check.name}`));
                    passedIndexChecks++;
                } else {
                    console.log(colors.warning(`   ‚ö†Ô∏è  ${check.name}`));
                }
            });
            
            const indexPercentage = Math.round((passedIndexChecks / indexChecks.length) * 100);
            console.log(colors.highlight(`   üìä √çndice: ${indexPercentage}% completado`));
            
        } catch (error) {
            console.log(colors.error(`   ‚ùå Error en √≠ndice: ${error.message}`));
        }
        
        // 6. Probar secciones espec√≠ficas
        console.log(colors.info('\n6Ô∏è‚É£ Probando secciones espec√≠ficas...'));
        
        const sectionsToTest = ['hero', 'about', 'contact'];
        
        for (const section of sectionsToTest) {
            try {
                console.log(colors.info(`   üîç Probando secci√≥n: ${section}`));
                
                const sectionResponse = await axios.get(`${BASE_URL}/${selectedClient.clientId}/section/${section}`);
                const sectionHtml = sectionResponse.data;
                
                const sectionChecks = {
                    hero: [
                        { name: 'Background con gradiente', check: sectionHtml.includes('bg-gradient-to-br from-purple-900') },
                        { name: 'Elementos decorativos', check: sectionHtml.includes('animate-pulse') },
                        { name: 'T√≠tulo principal', check: sectionHtml.includes('text-6xl lg:text-8xl') },
                        { name: 'Botones CTA', check: sectionHtml.includes('bg-gradient-to-r from-purple-600') },
                        { name: 'Scroll indicator', check: sectionHtml.includes('animate-bounce') }
                    ],
                    about: [
                        { name: 'Layout de dos columnas', check: sectionHtml.includes('lg:grid-cols-2') },
                        { name: 'Imagen con decoraciones', check: sectionHtml.includes('rounded-3xl overflow-hidden') },
                        { name: 'Caracter√≠sticas', check: sectionHtml.includes('bg-gradient-to-br from-purple-500') },
                        { name: 'Estad√≠sticas', check: sectionHtml.includes('stat-item') },
                        { name: 'Contenido adicional', check: sectionHtml.includes('additionalContent') }
                    ],
                    contact: [
                        { name: 'Informaci√≥n de contacto', check: sectionHtml.includes('Informaci√≥n de Contacto') },
                        { name: 'Formulario moderno', check: sectionHtml.includes('rounded-3xl shadow-2xl') },
                        { name: 'Campos de formulario', check: sectionHtml.includes('rounded-xl focus:ring-2') },
                        { name: 'Redes sociales', check: sectionHtml.includes('S√≠guenos en Redes Sociales') },
                        { name: 'Informaci√≥n adicional', check: sectionHtml.includes('Respuesta r√°pida') }
                    ]
                };
                
                const checks = sectionChecks[section] || [];
                let passedSectionChecks = 0;
                
                checks.forEach(check => {
                    if (check.check) {
                        console.log(colors.success(`      ‚úÖ ${check.name}`));
                        passedSectionChecks++;
                    } else {
                        console.log(colors.warning(`      ‚ö†Ô∏è  ${check.name}`));
                    }
                });
                
                const sectionPercentage = Math.round((passedSectionChecks / checks.length) * 100);
                console.log(colors.highlight(`      üìä ${section}: ${sectionPercentage}% completado`));
                
            } catch (error) {
                console.log(colors.error(`      ‚ùå Error en ${section}: ${error.message}`));
            }
        }
        
        // 7. Verificar funcionalidades JavaScript
        console.log(colors.info('\n7Ô∏è‚É£ Verificando funcionalidades JavaScript...'));
        
        try {
            const heroResponse = await axios.get(`${BASE_URL}/${selectedClient.clientId}/section/hero`);
            const heroHtml = heroResponse.data;
            
            const jsChecks = [
                { name: 'Navegaci√≥n por teclado', check: heroHtml.includes('keydown') },
                { name: 'Efectos de entrada', check: heroHtml.includes('DOMContentLoaded') },
                { name: 'Animaciones CSS', check: heroHtml.includes('@keyframes') },
                { name: 'Hover effects', check: heroHtml.includes('hover:') },
                { name: 'Responsive breakpoints', check: heroHtml.includes('@media (max-width:') }
            ];
            
            let passedJsChecks = 0;
            jsChecks.forEach(check => {
                if (check.check) {
                    console.log(colors.success(`   ‚úÖ ${check.name}`));
                    passedJsChecks++;
                } else {
                    console.log(colors.warning(`   ‚ö†Ô∏è  ${check.name}`));
                }
            });
            
            const jsPercentage = Math.round((passedJsChecks / jsChecks.length) * 100);
            console.log(colors.highlight(`   üìä JavaScript: ${jsPercentage}% completado`));
            
        } catch (error) {
            console.log(colors.error(`   ‚ùå Error verificando JavaScript: ${error.message}`));
        }
        
        // 8. Resumen final
        console.log(colors.title('\nüéâ RESUMEN DE PRUEBAS DE DISE√ëO'));
        console.log(colors.subtitle('='.repeat(50)));
        
        console.log(colors.info('\n‚úÖ Mejoras implementadas:'));
        console.log(colors.highlight('   ‚Ä¢ Layout moderno con glassmorphism'));
        console.log(colors.highlight('   ‚Ä¢ Navegaci√≥n flotante mejorada'));
        console.log(colors.highlight('   ‚Ä¢ Header y footer redise√±ados'));
        console.log(colors.highlight('   ‚Ä¢ Gradientes y sombras modernas'));
        console.log(colors.highlight('   ‚Ä¢ Animaciones y transiciones suaves'));
        console.log(colors.highlight('   ‚Ä¢ Dise√±o completamente responsive'));
        console.log(colors.highlight('   ‚Ä¢ SEO optimizado con meta tags'));
        console.log(colors.highlight('   ‚Ä¢ Navegaci√≥n por teclado'));
        console.log(colors.highlight('   ‚Ä¢ Efectos hover mejorados'));
        
        console.log(colors.info('\nüîó URLs de prueba:'));
        console.log(colors.highlight(`   ‚Ä¢ √çndice: ${BASE_URL}/${selectedClient.clientId}/pages`));
        console.log(colors.highlight(`   ‚Ä¢ Hero: ${BASE_URL}/${selectedClient.clientId}/section/hero`));
        console.log(colors.highlight(`   ‚Ä¢ About: ${BASE_URL}/${selectedClient.clientId}/section/about`));
        console.log(colors.highlight(`   ‚Ä¢ Contact: ${BASE_URL}/${selectedClient.clientId}/section/contact`));
        
        console.log(colors.info('\nüéÆ Funcionalidades de navegaci√≥n:'));
        console.log(colors.highlight('   ‚Ä¢ Flecha izquierda: Secci√≥n anterior'));
        console.log(colors.highlight('   ‚Ä¢ Flecha derecha: Siguiente secci√≥n'));
        console.log(colors.highlight('   ‚Ä¢ Home: Volver al √≠ndice'));
        
        console.log(colors.title('\n‚ú® ¬°Dise√±os mejorados exitosamente!'));
        console.log(colors.subtitle('='.repeat(50)));
        
    } catch (error) {
        console.log(colors.error('\n‚ùå ERROR EN LAS PRUEBAS:'));
        console.log(colors.error(`   ${error.message}`));
        
        if (error.response) {
            console.log(colors.error(`   Status: ${error.response.status}`));
            console.log(colors.error(`   Data: ${JSON.stringify(error.response.data, null, 2)}`));
        }
    }
}

// Funci√≥n para mostrar ayuda
function showHelp() {
    console.log(colors.title('\nüìñ AYUDA - PRUEBA DE DISE√ëOS'));
    console.log(colors.subtitle('='.repeat(50)));
    console.log(colors.info('\nUso:'));
    console.log(colors.highlight('   node test-disenos-mejorados.js'));
    
    console.log(colors.info('\nFuncionalidades:'));
    console.log(colors.highlight('   ‚Ä¢ Prueba de layout moderno'));
    console.log(colors.highlight('   ‚Ä¢ Verificaci√≥n de navegaci√≥n'));
    console.log(colors.highlight('   ‚Ä¢ An√°lisis de CSS mejorado'));
    console.log(colors.highlight('   ‚Ä¢ Verificaci√≥n de JavaScript'));
    console.log(colors.highlight('   ‚Ä¢ Prueba de responsividad'));
    console.log(colors.highlight('   ‚Ä¢ Verificaci√≥n de SEO'));
    
    console.log(colors.info('\nRequisitos:'));
    console.log(colors.highlight('   ‚Ä¢ Servidor ejecut√°ndose en localhost:3000'));
    console.log(colors.highlight('   ‚Ä¢ Al menos un cliente configurado'));
    console.log(colors.highlight('   ‚Ä¢ Dependencias: axios, chalk'));
}

// Verificar argumentos de l√≠nea de comandos
const args = process.argv.slice(2);
if (args.includes('--help') || args.includes('-h')) {
    showHelp();
    process.exit(0);
}

// Ejecutar si es el archivo principal
if (require.main === module) {
    testDisenosMejorados();
}

module.exports = { testDisenosMejorados, showHelp };
